- like_previews = post.likes.order(created_at: :asc).limit(1).load
- total_likes = post.likes.count

= turbo_frame_tag post, target: "_top"
  .post
    .post__meta
      a.post__avatar href=profile_path(post.user) = image_tag post.user.avatar_image, class: "avatar", width: 40
      .post__meta-text
        a.post__author href=profile_path(post.user) = post.user.public_name
        - if post.location_description.present?
          .post__location = post.location_description
      .post__meta-actions: .context-menu data-controller="context" data-context-path-value=context_post_path(post) data-action="click->context#show"
    .post__content data-controller="hide"
      img.post__image src=image_asset_url(post.image, width: 416)
      .post__icon-bar
        - if post.likes.where(user: current_user).any?
          = link_to "", like_path(post), method: :delete, class: "post__icon-bar__button heart-button active"
        - else
          = link_to "", likes_path(post_id: post.id), method: :post, class: "post__icon-bar__button heart-button"
        - if policy(post).comment?
          .post__icon-bar__button.comment-button data-action="click->hide#toggle"
      - if like_previews.any?
        .post__like-bar
          - user = like_previews.first.user
          - link = link_to user.public_name, profile_path(user), class: "link"
          - if total_likes > 1
            = t ".liked_by_many_html", name: link, count: total_likes - like_previews.size
          - else
            = t ".liked_by_html", name: link
      .post__description = tagged_format post.description
      .post__date = l post.created_at, format: :short
      - if policy(post).comment?
        .post__comment-bar data-hide-target="target" hidden=true
          = form_with model: current_user.comments.new, url: post_comments_path(post) do |f|
            = f.text_area :text, placeholder: t(".add_a_comment")
            = f.submit t(".post_comment")
      .post__comments.stack = render post.comments.reverse_chronologic
